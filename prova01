#Quest達o1

defmodule Calculadora do
  require Integer

  def potencia(_, 0), do: 1
  def potencia(n, p) when Integer.is_odd(p), do: n * potencia(n, p - 1)

  def potencia(n, p) do
    result = potencia(n, div(p, 2))
    result * result
  end

  def fatorial(0), do: 1

  def fatorial(n) when n > 0 do
    Enum.reduce(1..n, &*/2)
  end

  def percentual(n, p) do
    porcentagem = p/100
    result = n * porcentagem
    result
  end
end

#Quest達o2

defmodule Questao2 do
  def maiorValor(lista) do
    maior = Enum.max(lista)
    index = Enum.find_index(lista, fn x -> x == Enum.max(lista) end)
    {maior, index}
  end

end



#Quest達o3
defmodule Questao3 do
  def nomeDoMaisJovem(listaComTupla) do
    nome = Enum.map(listaComTupla, fn x -> elem(x, 0) end)
    idade = Enum.map(listaComTupla, fn x -> elem(x, 1) end)
    minimaIdade = Enum.min(idade)
    indexIdade = Enum.find_index(idade, fn x -> x == minimaIdade end)
    pessoaMaisJovem = Enum.at(nome, indexIdade)
  end

  def maiorQue30(listaComTupla) do
    Enum.filter(listaComTupla, fn x -> elem(x, 1) > 30 end)
    |> Enum.count()
  end

  def idadesImpares(listaComTupla) do
    Enum.filter(listaComTupla, fn x -> rem(elem(x, 1), 2) == 1 end)
  end
end



#Quest達o4

defmodule Questao4 do
  def unir(lista01, lista02) do
    MapSet.union(MapSet.new(lista01), MapSet.new(lista02))
  end

  def intersecao(lista01, lista02) do
    MapSet.intersection(MapSet.new(lista01), MapSet.new(lista02))
  end
end
